name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - 'technicaltest/src/**'
      - 'technicaltest/Dockerfile'
      - 'technicaltest/docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'technicaltest/src/**'
      - 'technicaltest/Dockerfile'
      - 'technicaltest/docker-compose.yml'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: technicaltest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Build project (skip tests)
        run: mvn install -DskipTests

      - name: Start Docker Compose
        run: docker compose up -d --build

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5433 && break
            sleep 1
          done

      - name: Run Integration Tests
        run: mvn verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5433/test_db
          SPRING_DATASOURCE_USERNAME: pguser
          SPRING_DATASOURCE_PASSWORD: password

      - name: Shut down Docker
        run: docker compose down --remove-orphans

      - name: Build & Push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: medhachami/progressoft
          tags: latest
          registry: docker.io
          dockerfile: technicaltest/Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
